{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js\";\n\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value,\n        id: this.props.student.id\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        imageUrl: this.state.imageUrl,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa\n      }; // Add edit student in back-end database\n\n      let editstudent = await this.props.editStudent(student);\n      console.log(editstudent); // Update state, and trigger redirect to show the editing student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        imageUrl: \"\",\n        email: \"\",\n        campusId: null,\n        gpa: null,\n        redirect: true,\n        id: null\n      });\n    };\n  }\n\n  // Initialize state\n  //   constructor(props){\n  //     super(props);\n  //     this.state = {\n  //       firstname: \"\", \n  //       lastname: \"\",\n  //       imageUrl: \"\",\n  //       email: \"\", \n  //       campusId: null,\n  //       gpa: null, \n  //       redirect: false, \n  //       redirectId: null\n  //     };\n  //   }\n  componentDidMount() {\n    this.props.fetchStudentThunk(this.props.student.id);\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render editing student input form\n\n\n  render() {\n    // Redirect to the student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","fetchStudentThunk","editStudentThunk","EditStudentContainer","handleChange","event","setState","target","name","value","id","props","student","handleSubmit","preventDefault","firstname","state","lastname","imageUrl","email","campusId","gpa","editstudent","editStudent","console","log","redirect","componentDidMount","componentWillUnmount","redirectId","render","mapDispatch","dispatch","fetchStudent"],"mappings":"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","sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditStudentView from '../views/EditStudentView';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\",\n//       imageUrl: \"\",\n//       email: \"\", \n//       campusId: null,\n//       gpa: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n  componentDidMount() {\n    this.props.fetchStudentThunk(this.props.student.id)\n    }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n      id: this.props.student.id\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        imageUrl: this.state.imageUrl,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n    };\n    \n    // Add edit student in back-end database\n    let editstudent = await this.props.editStudent(student);\n    console.log(editstudent)\n\n    // Update state, and trigger redirect to show the editing student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\", \n      campusId: null, \n      gpa: null,\n      redirect: true, \n      id: null\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render editing student input form\n  render() {\n    // Redirect to the student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n        editStudent: (student) => dispatch(editStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(EditStudentContainer);"]},"metadata":{},"sourceType":"module"}