{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditCampusContainer.js\";\n\n/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl,\n        id: this.state.id\n      }; // Edits existing campus in back-end database\n\n      let changeCampus = await this.props.editCampus(campus);\n      console.log(changeCampus); // Update state, and trigger redirect to show the campus that is being edited\n\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        imageUrl: \"\",\n        redirect: true,\n        id: campus.id\n      });\n    };\n  }\n\n  // Initialize state\n  //   constructor(props){\n  //     super(props);\n  //     this.state = {\n  //       name: \"\", \n  //       address: \"\", \n  //       description: \"\", \n  //       imageUrl: \"\",\n  //       redirect: false, \n  //       id: null\n  //     };\n  //   }\n  componentDidMount() {\n    this.props.fetchCampus;\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render edit campus input form\n\n\n  render() {\n    // Redirect to edit campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    editCampus: campus => dispatch(editCampusThunk(campus)),\n    fetchCampus: id => dispatch\n  };\n}; // Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditCampusContainer.js"],"names":["Header","Component","connect","Redirect","EditCampusView","fetchCampusThunk","editCampusThunk","EditCampusContainer","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","imageUrl","id","changeCampus","props","editCampus","console","log","redirect","componentDidMount","fetchCampus","componentWillUnmount","redirectId","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       name: \"\", \n//       address: \"\", \n//       description: \"\", \n//       imageUrl: \"\",\n//       redirect: false, \n//       id: null\n//     };\n//   }\n\n  componentDidMount() {\n      this.props.fetchCampus\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl,\n        id: this.state.id\n    };\n    \n    // Edits existing campus in back-end database\n    let changeCampus = await this.props.editCampus(campus);\n    console.log(changeCampus);\n\n    // Update state, and trigger redirect to show the campus that is being edited\n    this.setState({\n      name: \"\", \n      address: \"\", \n      description: \"\",\n      imageUrl: \"\", \n      redirect: true, \n      id: campus.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render edit campus input form\n  render() {\n    // Redirect to edit campus's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditCampusView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        editCampus: (campus) => dispatch(editCampusThunk(campus)),\n        fetchCampus: (id) => dispatch\n    })\n}\n\n// Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(EditCampusContainer);"]},"metadata":{},"sourceType":"module"}