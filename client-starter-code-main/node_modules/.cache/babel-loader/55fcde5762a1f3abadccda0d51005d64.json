{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js\";\n\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      // Updating information.\n\n      this.setState({\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        id: this.props.match.params.id,\n        redirect: true\n      }); // Add edit student in back-end database\n\n      let editstudent = await this.props.editStudent(changestudent);\n      console.log(editstudent);\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\",\n      campusId: null,\n      gpa: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStudent(this.props.match.params.id);\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render editing student input form\n\n\n  render() {\n    // Redirect to the student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        student: this.props.student\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    student: state.student\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","fetchStudentThunk","editStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","firstname","state","lastname","email","imageUrl","gpa","id","match","params","redirect","editstudent","editStudent","changestudent","console","log","campusId","redirectId","componentDidMount","fetchStudent","componentWillUnmount","render","student","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\", \n      campusId: null,\n      gpa: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n  componentDidMount() {\n      this.props.fetchStudent(this.props.match.params.id)\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    // Updating information.\n    this.setState({\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        \n        id: this.props.match.params.id,\n        redirect: true,\n    })\n    \n    // Add edit student in back-end database\n    let editstudent = await this.props.editStudent(changestudent);\n    console.log(editstudent)\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n}\n  // Render editing student input form\n  render() {\n    // Redirect to the student's page after submit\n    if(this.state.redirect) {\n        return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n      }\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit} \n          student={this.props.student}     \n        />\n      </div>          \n    );\n  }\n}\n\nconst mapState = (state) => {\n    return { \n        student: state.student\n    }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n        editStudent: (student) => dispatch(editStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"]},"metadata":{},"sourceType":"module"}