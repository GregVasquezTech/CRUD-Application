{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\n\nconst axios = require('axios'); //All Campuses\n// THUNK CREATOR:\n\n\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`); // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Add Campus\n// THUNK CREATOR:\n\nexport const addCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"campus\" object's data to database\n    let res = await axios.post(`/api/campuses`, student); // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n}; //Delete Campus\n// THUNK CREATOR: \n\nexport const deleteCampusThunk = campusId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusId\") from database\n    await axios.delete(`/api/campuses/${campusId}`); // Delete successful so change state with dispatch\n\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Edit Campus\n// THUNK CREATOR:\n\nexport const editCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus); // Update successful so change state with dispatch\n\n    dispatch(ac.editCampus(updatedCampus));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Single Campus\n// THUNK CREATOR:\n\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // All Students\n// THUNK CREATOR:\n\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`); // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Add Student\n// THUNK CREATOR:\n\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student); // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n}; // Delete Student\n// THUNK CREATOR:\n\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`); // Delete successful so change state with dispatch\n\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Edit Student\n// THUNK CREATOR:\n\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); // Update successful so change state with dispatch\n\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Single Student\n// THUNK CREATOR:\n\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`); // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n\n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/store/thunks.js"],"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","addCampusThunk","campus","post","student","addStudent","deleteCampusThunk","campusId","delete","deleteCampus","editCampusThunk","updatedCampus","put","id","editCampus","fetchCampusThunk","fetchCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","deleteStudentThunk","studentId","deleteStudent","editStudentThunk","updatedStudent","editStudent","fetchStudentThunk","fetchStudent"],"mappings":"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","sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"campus\" object's data to database\n    let res = await axios.post(`/api/campuses`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n//Delete Campus\n// THUNK CREATOR: \nexport const deleteCampusThunk = campusId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusId\") from database\n    await axios.delete(`/api/campuses/${campusId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const editCampusThunk = campus => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\n    let updatedCampus= await axios.put(`/api/campuses/${campus.id}`, campus); \n    // Update successful so change state with dispatch\n    dispatch(ac.editCampus(updatedCampus));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}