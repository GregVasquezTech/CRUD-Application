{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js\";\n\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let editstudent = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        imageUrl: this.state.imageUrl,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa\n      }; // Add edit student in back-end database\n\n      let editStudent = await this.props.editStudent(editstudent); // Update state, and trigger redirect to show the editing student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        imageUrl: \"\",\n        email: \"\",\n        campusId: null,\n        gpa: null,\n        redirect: true,\n        id: editStudent.id\n      });\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\",\n      campusId: null,\n      gpa: null,\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  componentDidMount() {\n    this.setState({\n      firstname: this.props.student.firstname,\n      lastname: this.props.student.lastname,\n      email: this.props.student.email,\n      imageUrl: this.props.student.imageUrl,\n      gpa: this.props.student.gpa,\n      campusId: this.props.student.campusId\n    });\n  } // Take action after user click the submit button\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render editing student input form\n\n\n  render() {\n    // Redirect to the student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","editStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","editstudent","firstname","state","lastname","imageUrl","email","campusId","gpa","editStudent","redirect","id","redirectId","componentDidMount","student","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk } from '../../store/thunks';\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\", \n      campusId: null,\n      gpa: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  componentDidMount() {\n      this.setState({\n          firstname: this.props.student.firstname,\n          lastname: this.props.student.lastname,\n          email: this.props.student.email,\n          imageUrl: this.props.student.imageUrl,\n          gpa: this.props.student.gpa,\n          campusId: this.props.student.campusId\n      })\n  }\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let editstudent = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        imageUrl: this.state.imageUrl,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n    };\n    \n    // Add edit student in back-end database\n    let editStudent = await this.props.editStudent(editstudent);\n\n    // Update state, and trigger redirect to show the editing student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\", \n      campusId: null, \n      gpa: null,\n      redirect: true, \n      id: editStudent.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render editing student input form\n  render() {\n    // Redirect to the student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        editStudent: (student) => dispatch(editStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(EditStudentContainer);"]},"metadata":{},"sourceType":"module"}