{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js\";\n\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value,\n        id: this.props.student.id\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      // Updating information.\n\n      let changestudent = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        imageUrl: this.state.imageUrl,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n        id: this.state.id,\n        redirect: true\n      }; // Add edit student in back-end database\n\n      let editstudent = await this.props.editStudent(changestudent);\n      console.log(editstudent);\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\",\n      campusId: null,\n      gpa: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({});\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render editing student input form\n\n\n  render() {\n    // Redirect to the student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","fetchStudentThunk","editStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","id","student","handleSubmit","preventDefault","changestudent","firstname","state","lastname","imageUrl","email","campusId","gpa","redirect","editstudent","editStudent","console","log","redirectId","componentDidMount","componentWillUnmount","render","mapDispatch","dispatch","fetchStudent"],"mappings":"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","sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditStudentView from '../views/EditStudentView';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      imageUrl: \"\",\n      email: \"\", \n      campusId: null,\n      gpa: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n      this.setState ({\n          \n      })\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n      id: this.props.student.id\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    // Updating information.\n    let changestudent = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        imageUrl: this.state.imageUrl,\n        email: this.state.email,\n        campusId: this.state.campusId,\n        gpa: this.state.gpa,\n        id: this.state.id,\n        redirect: true,\n    };\n    \n    // Add edit student in back-end database\n    let editstudent = await this.props.editStudent(changestudent);\n    console.log(editstudent)\n\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render editing student input form\n  render() {\n    // Redirect to the student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n        editStudent: (student) => dispatch(editStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(EditStudentContainer);"]},"metadata":{},"sourceType":"module"}