{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditCampusContainer.js\";\n\n/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value,\n        id: this.props.match.params.id\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      this.setState({\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl,\n        id: this.props.match.params.id,\n        redirect: true\n      }); // Edits existing campus in back-end database\n\n      let campus = await this.props.editCampus(this.state);\n      console.log(campus);\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render edit campus input form\n\n\n  render() {\n    // Redirect to the campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    editCampus: campus => dispatch(editCampusThunk(campus)),\n    fetchCampus: id => dispatch(fetchCampusThunk(id))\n  };\n}; // Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["/Users/greg/Document/HUNTER/Webdev/CRUD/client-starter-code-main/src/components/containers/EditCampusContainer.js"],"names":["Header","Component","connect","Redirect","EditCampusView","fetchCampusThunk","editCampusThunk","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","id","match","params","handleSubmit","preventDefault","state","address","description","imageUrl","redirect","campus","editCampus","console","log","redirectId","componentDidMount","fetchCampus","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: \"\", \n      address: \"\", \n      description: \"\", \n      imageUrl: \"\",\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n      this.props.fetchCampus(this.props.match.params.id)\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n      id: this.props.match.params.id\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    \n    this.setState({\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl,\n        id: this.props.match.params.id,\n        redirect: true,\n    })\n    \n    // Edits existing campus in back-end database\n    let campus = await this.props.editCampus(this.state);\n    console.log(campus)\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render edit campus input form\n  render() {\n    // Redirect to the campus's page after submit\n    if(this.state.redirect) {\n        return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditCampusView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}  \n          campus={this.props.campus}    \n        />\n      </div>          \n    );\n  }\n}\n\nconst mapState = (state) => {\n    return {\n        campus: state.campus,\n    }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        editCampus: (campus) => dispatch(editCampusThunk(campus)),\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id))\n    })\n}\n\n// Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"]},"metadata":{},"sourceType":"module"}